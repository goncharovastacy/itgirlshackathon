[
    {"title": "Объект",
    "text": "Объект - это базовая единица данных в JavaScript, которая содержит свойства и методы. Свойства представляют собой переменные, которые хранят значения объекта, а методы - это функции, которые могут быть вызваны для выполнения определенных операций."},
    {"title": "Функция",
    "text": "Функция - это блок кода, который может быть вызван для выполнения определенных действий. Они используются для группировки кода и повторного использования. Функции могут принимать аргументы и возвращать значения."},
    {"title": "Переменная",
    "text": "Переменная - это контейнер, который хранит значение. Они используются для хранения информации, чтобы ее можно было использовать и изменять в коде."},
    {"title": "Цикл",
    "text": "Цикл - это конструкция в JavaScript, которая позволяет повторять определенный блок кода несколько раз. Например, цикл for повторяет блок кода заданное количество итераций."},
    {"title": "Условный оператор",
    "text": "Условный оператор - это конструкция, которая выполняет определенный блок кода, если заданное условие истинно. Например, оператор if позволяет выполнить блок кода, если определенное условие истинно, и пропустить его, если условие ложно."},
    {"title": "Массив",
    "text": "Массив - это тип данных JavaScript, представляющий собой упорядоченный набор значений. Значения в массиве могут быть любого типа данных, и доступ к ним осуществляется по индексам."},
    {"title": "Строка",
    "text": "Строка - это последовательность символов, заключенных в кавычки. Строки используются для представления текста и могут быть объединены, изменены и сравнены."},
    {"title": "DOM",
    "text": "DOM (Document Object Model) - это представление HTML-документа в виде дерева объектов, которое позволяет JavaScript взаимодействовать с HTML-элементами и изменять их содержимое, стили и атрибуты."},
    {"title": "Call Stack",
    "text": "Call Stack - это механизм в JavaScript, который отслеживает, какие функции были вызваны и находятся в процессе выполнения. Он сохраняет текущий контекст выполнения и восстанавливает его после завершения функции."},
    {"title": "Асинхронность",
    "text": "Асинхронность - это способность JavaScript выполнять несколько операций одновременно, без блокировки выполнения кода. Это позволяет работать с запросами к серверу, таймерами и другими операциями без ожидания их завершения."}
]